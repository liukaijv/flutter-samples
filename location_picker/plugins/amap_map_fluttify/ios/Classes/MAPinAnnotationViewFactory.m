//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "MAPinAnnotationViewFactory.h"
#import "AmapMapFluttifyPlugin.h"
#import <objc/runtime.h>
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation MAPinAnnotationViewFactory {
}

- (instancetype)initWithRegistrar:(NSObject <FlutterPluginRegistrar> *)registrar {
  self = [super init];
  if (self) {
    _registrar = registrar;
  }

  return self;
}

- (NSObject<FlutterMessageCodec>*)createArgsCodec {
  return [FlutterStandardMessageCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]];
}

- (NSObject <FlutterPlatformView> *)createWithFrame:(CGRect)frame viewIdentifier:(int64_t)viewId arguments:(id _Nullable)args {
  return [[MAPinAnnotationViewPlatformView alloc] initWithViewId:viewId frame: frame registrar:_registrar arguments: args];
}

@end

@implementation MAPinAnnotationViewPlatformView {
  int64_t _viewId;
  CGRect _frame;
  NSDictionary<NSString *, Handler>* _handlerMap;
  MAPinAnnotationView* _view;
  id _args;
}

- (instancetype)initWithViewId:(int64_t)viewId frame:(CGRect)frame registrar:(NSObject <FlutterPluginRegistrar> *)registrar arguments:(id _Nullable)args {
  self = [super init];
  if (self) {
    _viewId = viewId;
    _registrar = registrar;
    _frame = frame;
    _args = args;
  }

  return self;
}

- (UIView *)view {
  __weak __typeof(self)weakSelf = self;
  if (_view == nil) {
    NSDictionary<NSString*, id>* params = (NSDictionary<NSString*, id>*) _args;

    _view = [[MAPinAnnotationView alloc] initWithFrame:_frame];

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    ////////////////////////////////初始化UiKitView////////////////////////////////////////

    // 这里用一个magic number调整一下id
    // 同时存放viewId和refId的对象, 供后续viewId转refId使用
    HEAP[[NSString stringWithFormat:@"%@", @(2147483647 - _viewId)]] = _view;
    HEAP[[NSString stringWithFormat:@"%@", @(_view.hash)]] = _view;
  }

  //region method call handler
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:@"me.yohom/amap_map_fluttify/MAPinAnnotationView"
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];

  [channel setMethodCallHandler:^(FlutterMethodCall *methodCall, FlutterResult methodResult) {
    NSDictionary<NSString *, id> *args = (NSDictionary<NSString *, id> *) [methodCall arguments];

    __strong __typeof(weakSelf) strongSelf = weakSelf;
    if (strongSelf != nil && strongSelf->_handlerMap[methodCall.method] != nil) {
      strongSelf->_handlerMap[methodCall.method](strongSelf->_registrar, args, methodResult);
    } else {
      methodResult(FlutterMethodNotImplemented);
    }
  }];
  //endregion

  //region handlers
  _handlerMap = @{
      @"MAPinAnnotationView::get_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::get_pinColor");
          }
      
          // ref object
          MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
      
          // invoke native method
          MAPinAnnotationColor result = ref.pinColor;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"MAPinAnnotationView::get_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::get_animatesDrop");
          }
      
          // ref object
          MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
      
          // invoke native method
          BOOL result = ref.animatesDrop;
      
          // 返回值: Value
          NSObject* __result__ = @(result);
      
          methodResult(__result__);
      },
      
      @"MAPinAnnotationView::set_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::set_pinColor");
          }
      
          // args
          // enum arg
          MAPinAnnotationColor pinColor = (MAPinAnnotationColor) [args[@"pinColor"] integerValue];
      
          // ref
          MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
      
          ref.pinColor = pinColor;
          methodResult(@"success");
      },
      
      @"MAPinAnnotationView::set_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
          // print log
          if (enableLog) {
              NSLog(@"MAPinAnnotationView::set_animatesDrop");
          }
      
          // args
          // jsonable arg
          BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
      
          // ref
          MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
      
          ref.animatesDrop = animatesDrop;
          methodResult(@"success");
      },
      
  };
  //endregion
  return _view;
}

//region delegate
- (void)traceManager : (MATraceManager*)manager didTrace: (NSArray<CLLocation*>*)locations correct: (NSArray<MATracePoint*>*)tracePoints distance: (double)distance withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MATraceDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::traceManager_didTrace_correct_distance_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  MATraceManager* argmanager = manager;
  // ref callback arg
  NSArray<CLLocation*>* arglocations = locations;
  // ref callback arg
  NSArray<MATracePoint*>* argtracePoints = tracePoints;
  // primitive callback arg
  NSNumber* argdistance = @(distance);
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MATraceDelegate::traceManager_didTrace_correct_distance_withError" arguments:@{@"manager": argmanager == nil ? [NSNull null] : argmanager, @"locations": arglocations == nil ? [NSNull null] : arglocations, @"tracePoints": argtracePoints == nil ? [NSNull null] : argtracePoints, @"distance": argdistance == nil ? [NSNull null] : argdistance, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapViewRequireLocationAuth : (CLLocationManager*)locationManager
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MATraceDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MATraceDelegate::mapViewRequireLocationAuth");
  }

  // convert to jsonable arg
  // ref callback arg
  CLLocationManager* arglocationManager = locationManager;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MATraceDelegate::mapViewRequireLocationAuth" arguments:@{@"locationManager": arglocationManager == nil ? [NSNull null] : arglocationManager}];
  });
  
}

- (void)multiPointOverlayRenderer : (MAMultiPointOverlayRenderer*)renderer didItemTapped: (MAMultiPointItem*)item
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMultiPointOverlayRendererDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMultiPointOverlayRendererDelegate::multiPointOverlayRenderer_didItemTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMultiPointOverlayRenderer* argrenderer = renderer;
  // ref callback arg
  MAMultiPointItem* argitem = item;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMultiPointOverlayRendererDelegate::multiPointOverlayRenderer_didItemTapped" arguments:@{@"renderer": argrenderer == nil ? [NSNull null] : argrenderer, @"item": argitem == nil ? [NSNull null] : argitem}];
  });
  
}

- (void)mapViewRegionChanged : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewRegionChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewRegionChanged" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionWillChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionWillChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionWillChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionDidChangeAnimated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionDidChangeAnimated");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionDidChangeAnimated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionWillChangeAnimated: (BOOL)animated wasUserAction: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionWillChangeAnimated_wasUserAction");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionWillChangeAnimated_wasUserAction" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView regionDidChangeAnimated: (BOOL)animated wasUserAction: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_regionDidChangeAnimated_wasUserAction");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* arganimated = @(animated);
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_regionDidChangeAnimated_wasUserAction" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"animated": arganimated == nil ? [NSNull null] : arganimated, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapWillMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapWillMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapWillMoveByUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapDidMoveByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapDidMoveByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapDidMoveByUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapWillZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapWillZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapWillZoomByUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapView : (MAMapView*)mapView mapDidZoomByUser: (BOOL)wasUserAction
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_mapDidZoomByUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* argwasUserAction = @(wasUserAction);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_mapDidZoomByUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"wasUserAction": argwasUserAction == nil ? [NSNull null] : argwasUserAction}];
  });
  
}

- (void)mapViewWillStartLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLoadingMap" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidFinishLoadingMap : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFinishLoadingMap");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFinishLoadingMap" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidFailLoadingMap : (MAMapView*)mapView withError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidFailLoadingMap_withError");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidFailLoadingMap_withError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (MAAnnotationView*)mapView : (MAMapView*)mapView viewForAnnotation: (id<MAAnnotation>)annotation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_viewForAnnotation");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  id<MAAnnotation> argannotation = annotation;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_viewForAnnotation"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"annotation": argannotation == nil ? [NSNull null] : argannotation}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (MAAnnotationView*) nil;
}

- (void)mapView : (MAMapView*)mapView didAddAnnotationViews: (NSArray*)views
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAddAnnotationViews");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  NSArray* argviews = views;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAddAnnotationViews" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"views": argviews == nil ? [NSNull null] : argviews}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didSelectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didSelectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didSelectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didDeselectAnnotationView: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didDeselectAnnotationView");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didDeselectAnnotationView" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapViewWillStartLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewWillStartLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewWillStartLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapViewDidStopLocatingUser : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapViewDidStopLocatingUser");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapViewDidStopLocatingUser" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didUpdateUserLocation: (MAUserLocation*)userLocation updatingLocation: (BOOL)updatingLocation
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didUpdateUserLocation_updatingLocation");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAUserLocation* arguserLocation = userLocation;
  // primitive callback arg
  NSNumber* argupdatingLocation = @(updatingLocation);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didUpdateUserLocation_updatingLocation" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"userLocation": arguserLocation == nil ? [NSNull null] : arguserLocation, @"updatingLocation": argupdatingLocation == nil ? [NSNull null] : argupdatingLocation}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didFailToLocateUserWithError: (NSError*)error
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didFailToLocateUserWithError");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  NSError* argerror = error;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didFailToLocateUserWithError" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"error": argerror == nil ? [NSNull null] : argerror}];
  });
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view didChangeDragState: (MAAnnotationViewDragState)newState fromOldState: (MAAnnotationViewDragState)oldState
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;
  // enum callback arg
  NSNumber* argnewState = @((NSInteger) newState);
  // enum callback arg
  NSNumber* argoldState = @((NSInteger) oldState);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_annotationView_didChangeDragState_fromOldState" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"newState": argnewState == nil ? [NSNull null] : argnewState, @"oldState": argoldState == nil ? [NSNull null] : argoldState}];
  });
  
}

- (MAOverlayRenderer*)mapView : (MAMapView*)mapView rendererForOverlay: (id<MAOverlay>)overlay
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_rendererForOverlay");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  id<MAOverlay> argoverlay = overlay;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_rendererForOverlay"
                arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlay": argoverlay == nil ? [NSNull null] : argoverlay}
                   result:^(id result) {}]; // 由于结果是异步返回, 这里用不上, 所以就不生成代码了
  });
  
  // 由于flutter无法同步调用method channel, 所以暂不支持有返回值的回调方法
  // 相关issue https://github.com/flutter/flutter/issues/28310
  NSLog(@"暂不支持有返回值的回调方法");
  
  ////////////////////////////如果需要手写代码, 请写在这里/////////////////////////////
  
  ////////////////////////////////////////////////////////////////////////////////
  
  return (MAOverlayRenderer*) nil;
}

- (void)mapView : (MAMapView*)mapView didAddOverlayRenderers: (NSArray*)overlayRenderers
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAddOverlayRenderers");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  NSArray* argoverlayRenderers = overlayRenderers;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAddOverlayRenderers" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"overlayRenderers": argoverlayRenderers == nil ? [NSNull null] : argoverlayRenderers}];
  });
  
}

- (void)mapView : (MAMapView*)mapView annotationView: (MAAnnotationView*)view calloutAccessoryControlTapped: (UIControl*)control
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;
  // ref callback arg
  UIControl* argcontrol = control;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_annotationView_calloutAccessoryControlTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview, @"control": argcontrol == nil ? [NSNull null] : argcontrol}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewCalloutTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAnnotationViewCalloutTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAnnotationViewCalloutTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didAnnotationViewTapped: (MAAnnotationView*)view
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didAnnotationViewTapped");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAAnnotationView* argview = view;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didAnnotationViewTapped" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"view": argview == nil ? [NSNull null] : argview}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didChangeUserTrackingMode: (MAUserTrackingMode)mode animated: (BOOL)animated
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didChangeUserTrackingMode_animated");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // enum callback arg
  NSNumber* argmode = @((NSInteger) mode);
  // primitive callback arg
  NSNumber* arganimated = @(animated);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didChangeUserTrackingMode_animated" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"mode": argmode == nil ? [NSNull null] : argmode, @"animated": arganimated == nil ? [NSNull null] : arganimated}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didChangeOpenGLESDisabled: (BOOL)openGLESDisabled
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didChangeOpenGLESDisabled");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // primitive callback arg
  NSNumber* argopenGLESDisabled = @(openGLESDisabled);

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didChangeOpenGLESDisabled" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"openGLESDisabled": argopenGLESDisabled == nil ? [NSNull null] : argopenGLESDisabled}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didTouchPois: (NSArray*)pois
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didTouchPois");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  NSArray* argpois = pois;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didTouchPois" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"pois": argpois == nil ? [NSNull null] : argpois}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didSingleTappedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didSingleTappedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didSingleTappedAtCoordinate" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didLongPressedAtCoordinate: (CLLocationCoordinate2D)coordinate
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didLongPressedAtCoordinate");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // struct callback arg
  NSValue* argcoordinate = [NSValue value:&coordinate withObjCType:@encode(CLLocationCoordinate2D)];
  

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didLongPressedAtCoordinate" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"coordinate": argcoordinate == nil ? [NSNull null] : argcoordinate}];
  });
  
}

- (void)mapInitComplete : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapInitComplete");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapInitComplete" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapShowed: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapShowed");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAIndoorInfo* argindoorInfo = indoorInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapShowed" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"indoorInfo": argindoorInfo == nil ? [NSNull null] : argindoorInfo}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapFloorIndexChanged: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapFloorIndexChanged");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAIndoorInfo* argindoorInfo = indoorInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapFloorIndexChanged" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"indoorInfo": argindoorInfo == nil ? [NSNull null] : argindoorInfo}];
  });
  
}

- (void)mapView : (MAMapView*)mapView didIndoorMapHidden: (MAIndoorInfo*)indoorInfo
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::mapView_didIndoorMapHidden");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;
  // ref callback arg
  MAIndoorInfo* argindoorInfo = indoorInfo;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::mapView_didIndoorMapHidden" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView, @"indoorInfo": argindoorInfo == nil ? [NSNull null] : argindoorInfo}];
  });
  
}

- (void)offlineDataWillReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataWillReload");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataWillReload" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

- (void)offlineDataDidReload : (MAMapView*)mapView
{
  FlutterMethodChannel *channel = [FlutterMethodChannel
        methodChannelWithName:[NSString stringWithFormat:@"MAMapViewDelegate::Callback@%@", @(_view.hash)]
              binaryMessenger:[_registrar messenger]
                        codec:[FlutterStandardMethodCodec codecWithReaderWriter:[[FluttifyReaderWriter alloc] init]]];
  // print log
  if (enableLog) {
    NSLog(@"MAMapViewDelegate::offlineDataDidReload");
  }

  // convert to jsonable arg
  // ref callback arg
  MAMapView* argmapView = mapView;

  dispatch_async(dispatch_get_main_queue(), ^{
    [channel invokeMethod:@"Callback::MAMapViewDelegate::offlineDataDidReload" arguments:@{@"mapView": argmapView == nil ? [NSNull null] : argmapView}];
  });
  
}

//endregion

@end

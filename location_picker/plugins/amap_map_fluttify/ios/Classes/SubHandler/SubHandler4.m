//////////////////////////////////////////////////////////
// GENERATED BY FLUTTIFY. DO NOT EDIT IT.
//////////////////////////////////////////////////////////

#import "SubHandler4.h"
#import "FluttifyMessageCodec.h"

// Dart端一次方法调用所存在的栈, 只有当MethodChannel传递参数受限时, 再启用这个容器
extern NSMutableDictionary<NSString*, NSObject*>* STACK;
// Dart端随机存取对象的容器
extern NSMutableDictionary<NSNumber*, NSObject*>* HEAP;
// 日志打印开关
extern BOOL enableLog;

@implementation AmapMapFluttifyPlugin (SubHandler4)
- (NSDictionary<NSString*, Handler>*) getSubHandler4 {
    __weak __typeof(self)weakSelf = self;
    return @{
        @"MAParticleOverlayOptions::get_visibile_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                BOOL result = ref.visibile;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_duration_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                NSTimeInterval result = ref.duration;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_loop_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                BOOL result = ref.loop;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_maxParticles_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                NSInteger result = ref.maxParticles;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_icon_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                UIImage* result = ref.icon;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_startParticleSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                CGSize result = ref.startParticleSize;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleLifeTime_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                NSTimeInterval result = ref.particleLifeTime;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleStartColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                id<MAParticleColorGenerate> result = ref.particleStartColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleStartSpeed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                id<MAParticleVelocityGenerate> result = ref.particleStartSpeed;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleEmissionModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                MAParticleEmissionModule* result = ref.particleEmissionModule;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleShapeModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                id<MAParticleShapeModule> result = ref.particleShapeModule;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAParticleOverlayOptions::get_particleOverLifeModule_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAParticleOverlayOptions* ref = (MAParticleOverlayOptions*) args[@"__this__"];
        
                MAParticleOverLifeModule* result = ref.particleOverLifeModule;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayRenderer::get_overlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayRenderer* ref = (MAOverlayRenderer*) args[@"__this__"];
        
                id<MAOverlay> result = ref.overlay;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayRenderer::get_strokeImage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayRenderer* ref = (MAOverlayRenderer*) args[@"__this__"];
        
                UIImage* result = ref.strokeImage;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayRenderer::get_strokeTextureID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayRenderer* ref = (MAOverlayRenderer*) args[@"__this__"];
        
                GLuint result = ref.strokeTextureID;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayRenderer::get_alpha_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayRenderer* ref = (MAOverlayRenderer*) args[@"__this__"];
        
                CGFloat result = ref.alpha;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayRenderer::get_contentScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayRenderer* ref = (MAOverlayRenderer*) args[@"__this__"];
        
                CGFloat result = ref.contentScale;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocation::get_isUpdating_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocation* ref = (MAUserLocation*) args[@"__this__"];
        
                BOOL result = ref.updating;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocation::get_location_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocation* ref = (MAUserLocation*) args[@"__this__"];
        
                CLLocation* result = ref.location;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocation::get_heading_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocation* ref = (MAUserLocation*) args[@"__this__"];
        
                CLHeading* result = ref.heading;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorNode::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorNode* ref = (MAHeatMapVectorNode*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.coordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorNode::get_weight_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorNode* ref = (MAHeatMapVectorNode*) args[@"__this__"];
        
                float result = ref.weight;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorItem::get_center_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorItem* ref = (MAHeatMapVectorItem*) args[@"__this__"];
        
                MAMapPoint result = ref.center;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MAMapPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorItem::get_intensity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorItem* ref = (MAHeatMapVectorItem*) args[@"__this__"];
        
                float result = ref.intensity;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorItem::get_nodeIndices_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorItem* ref = (MAHeatMapVectorItem*) args[@"__this__"];
        
                NSArray<NSNumber*>* result = ref.nodeIndices;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_type_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                MAHeatMapType result = ref.type;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_visible_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                BOOL result = ref.visible;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_inputNodes_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                NSArray<MAHeatMapVectorNode*>* result = ref.inputNodes;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_size_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                CLLocationDistance result = ref.size;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_gap_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                CGFloat result = ref.gap;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_colors_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                NSArray<UIColor*>* result = ref.colors;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_startPoints_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                NSArray<NSNumber*>* result = ref.startPoints;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_opacity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                CGFloat result = ref.opacity;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_maxIntensity_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                int result = ref.maxIntensity;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_minZoom_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                CGFloat result = ref.minZoom;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlayOptions::get_maxZoom_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlayOptions* ref = (MAHeatMapVectorOverlayOptions*) args[@"__this__"];
        
                CGFloat result = ref.maxZoom;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAHeatMapVectorOverlay::get_option_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAHeatMapVectorOverlay* ref = (MAHeatMapVectorOverlay*) args[@"__this__"];
        
                MAHeatMapVectorOverlayOptions* result = ref.option;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMultiPointItem::get_coordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMultiPointItem* ref = (MAMultiPointItem*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.coordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMultiPointItem::get_customID_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMultiPointItem* ref = (MAMultiPointItem*) args[@"__this__"];
        
                NSString* result = ref.customID;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMultiPointItem::get_title_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMultiPointItem* ref = (MAMultiPointItem*) args[@"__this__"];
        
                NSString* result = ref.title;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMultiPointItem::get_subtitle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMultiPointItem* ref = (MAMultiPointItem*) args[@"__this__"];
        
                NSString* result = ref.subtitle;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMultiPointOverlay::get_items_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMultiPointOverlay* ref = (MAMultiPointOverlay*) args[@"__this__"];
        
                NSArray<MAMultiPointItem*>* result = ref.items;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayOption::get_height_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) args[@"__this__"];
        
                CGFloat result = ref.height;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayOption::get_heightScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) args[@"__this__"];
        
                CGFloat result = ref.heightScale;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayOption::get_topColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) args[@"__this__"];
        
                UIColor* result = ref.topColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayOption::get_sideColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) args[@"__this__"];
        
                UIColor* result = ref.sideColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayOption::get_visibile_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayOption* ref = (MACustomBuildingOverlayOption*) args[@"__this__"];
        
                BOOL result = ref.visibile;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlay::get_defaultOption_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) args[@"__this__"];
        
                MACustomBuildingOverlayOption* result = ref.defaultOption;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlay::get_customOptions_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlay* ref = (MACustomBuildingOverlay*) args[@"__this__"];
        
                NSArray<MACustomBuildingOverlayOption*>* result = ref.customOptions;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATracePoint::get_latitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATracePoint* ref = (MATracePoint*) args[@"__this__"];
        
                CLLocationDegrees result = ref.latitude;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATracePoint::get_longitude_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATracePoint* ref = (MATracePoint*) args[@"__this__"];
        
                CLLocationDegrees result = ref.longitude;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATraceLocation::get_loc_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATraceLocation* ref = (MATraceLocation*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.loc;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATraceLocation::get_angle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATraceLocation* ref = (MATraceLocation*) args[@"__this__"];
        
                double result = ref.angle;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATraceLocation::get_speed_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATraceLocation* ref = (MATraceLocation*) args[@"__this__"];
        
                double result = ref.speed;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MATraceLocation::get_time_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MATraceLocation* ref = (MATraceLocation*) args[@"__this__"];
        
                double result = ref.time;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAArc::get_startCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAArc* ref = (MAArc*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.startCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAArc::get_passedCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAArc* ref = (MAArc*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.passedCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAArc::get_endCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAArc* ref = (MAArc*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.endCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAArc::get_boundingMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAArc* ref = (MAArc*) args[@"__this__"];
        
                MAMapRect result = ref.boundingMapRect;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MAMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_showsAccuracyRing_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                BOOL result = ref.showsAccuracyRing;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_showsHeadingIndicator_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                BOOL result = ref.showsHeadingIndicator;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_fillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                UIColor* result = ref.fillColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                UIColor* result = ref.strokeColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                CGFloat result = ref.lineWidth;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_locationDotBgColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                UIColor* result = ref.locationDotBgColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_locationDotFillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                UIColor* result = ref.locationDotFillColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_enablePulseAnnimation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                BOOL result = ref.enablePulseAnnimation;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAUserLocationRepresentation::get_image_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAUserLocationRepresentation* ref = (MAUserLocationRepresentation*) args[@"__this__"];
        
                UIImage* result = ref.image;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_mapType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MAMapType result = ref.mapType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_centerCoordinate_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CLLocationCoordinate2D result = ref.centerCoordinate;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CLLocationCoordinate2D)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_region_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MACoordinateRegion result = ref.region;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_visibleMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MAMapRect result = ref.visibleMapRect;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MAMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_limitRegion_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MACoordinateRegion result = ref.limitRegion;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MACoordinateRegion)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_limitMapRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MAMapRect result = ref.limitMapRect;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(MAMapRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_zoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.zoomLevel;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_minZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.minZoomLevel;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_maxZoomLevel_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.maxZoomLevel;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_rotationDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.rotationDegree;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_cameraDegree_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.cameraDegree;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_zoomingInPivotsAroundAnchorPoint_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.zoomingInPivotsAroundAnchorPoint;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isZoomEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.zoomEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isScrollEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.scrollEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isRotateEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.rotateEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isRotateCameraEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.rotateCameraEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isSkyModelEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.skyModelEnable;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowsBuildings_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsBuildings;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowsLabels_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsLabels;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowTraffic_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showTraffic;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_trafficRatio_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGFloat result = ref.trafficRatio;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_touchPOIEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.touchPOIEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_showsCompass_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsCompass;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_compassOrigin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGPoint result = ref.compassOrigin;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_compassSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGSize result = ref.compassSize;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_showsScale_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsScale;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_scaleOrigin_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGPoint result = ref.scaleOrigin;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_scaleSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGSize result = ref.scaleSize;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_logoCenter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGPoint result = ref.logoCenter;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_logoSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGSize result = ref.logoSize;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_metersPerPointForCurrentZoom_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                double result = ref.metersPerPointForCurrentZoom;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isAbroad_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.isAbroad;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_maxRenderFrame_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSUInteger result = ref.maxRenderFrame;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isAllowDecreaseFrame_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.isAllowDecreaseFrame;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_openGLESDisabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.openGLESDisabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_screenAnchor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGPoint result = ref.screenAnchor;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGPoint)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowsWorldMap_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSNumber* result = ref.showsWorldMap;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_mapLanguage_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSNumber* result = ref.mapLanguage;
        
                // 返回值: jsonable
                id __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_annotations_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSArray* result = ref.annotations;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_selectedAnnotations_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSArray* result = ref.selectedAnnotations;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_annotationVisibleRect_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGRect result = ref.annotationVisibleRect;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGRect)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_allowsAnnotationViewSorting_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.allowsAnnotationViewSorting;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_showsUserLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsUserLocation;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_userLocation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MAUserLocation* result = ref.userLocation;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_customizeUserLocationAccuracyCircleRepresentation_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.customizeUserLocationAccuracyCircleRepresentation;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_userLocationAccuracyCircle_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MACircle* result = ref.userLocationAccuracyCircle;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_userTrackingMode_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                MAUserTrackingMode result = ref.userTrackingMode;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isUserLocationVisible_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.userLocationVisible;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_distanceFilter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CLLocationDistance result = ref.distanceFilter;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_desiredAccuracy_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CLLocationAccuracy result = ref.desiredAccuracy;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_headingFilter_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CLLocationDegrees result = ref.headingFilter;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_pausesLocationUpdatesAutomatically_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.pausesLocationUpdatesAutomatically;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_allowsBackgroundLocationUpdates_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.allowsBackgroundLocationUpdates;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_overlays_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                NSArray* result = ref.overlays;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowsIndoorMap_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsIndoorMap;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_isShowsIndoorMapControl_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.showsIndoorMapControl;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_indoorMapControlSize_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                CGSize result = ref.indoorMapControlSize;
        
                // 返回值: 结构体
                NSValue* __result__ = [NSValue value:&result withObjCType:@encode(CGSize)];
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAMapView::get_customMapStyleEnabled_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAMapView* ref = (MAMapView*) args[@"__this__"];
        
                BOOL result = ref.customMapStyleEnabled;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_fillColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                UIColor* result = ref.fillColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_strokeColor_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                UIColor* result = ref.strokeColor;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_lineWidth_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                CGFloat result = ref.lineWidth;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_lineJoinType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                MALineJoinType result = ref.lineJoinType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_lineCapType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                MALineCapType result = ref.lineCapType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_miterLimit_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                CGFloat result = ref.miterLimit;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_lineDash_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                BOOL result = ref.lineDash;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAOverlayPathRenderer::get_lineDashType_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAOverlayPathRenderer* ref = (MAOverlayPathRenderer*) args[@"__this__"];
        
                MALineDashType result = ref.lineDashType;
        
                // 返回值: Value
                NSObject* __result__ = @(result);
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAGroundOverlayRenderer::get_groundOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MAGroundOverlayRenderer* ref = (MAGroundOverlayRenderer*) args[@"__this__"];
        
                MAGroundOverlay* result = ref.groundOverlay;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MACustomBuildingOverlayRenderer::get_customBuildingOverlay_batch": ^(NSObject <FlutterPluginRegistrar>* registrar, id argsBatch, FlutterResult methodResult) {
            NSMutableArray* resultList = [NSMutableArray array];
        
            for (int __i__ = 0; __i__ < ((NSArray<NSDictionary<NSString*, NSObject*>*>*) argsBatch).count; __i__++) {
                NSDictionary<NSString*, id>* args = [((NSArray<NSDictionary<NSString*, id>*>*) argsBatch) objectAtIndex:__i__];
        
                // ref object
                MACustomBuildingOverlayRenderer* ref = (MACustomBuildingOverlayRenderer*) args[@"__this__"];
        
                MACustomBuildingOverlay* result = ref.customBuildingOverlay;
        
                // return a ref
                NSObject* __result__ = result;
        
                [resultList addObject:__result__];
            }
        
            methodResult(resultList);
        },
        
        @"MAGroundOverlay::set_alpha": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAGroundOverlay::set_alpha");
            }
        
            // args
            // jsonable arg
            CGFloat alpha = [args[@"alpha"] floatValue];
        
            // ref
            MAGroundOverlay* ref = (MAGroundOverlay*) args[@"__this__"];
        
            ref.alpha = alpha;
            methodResult(@"success");
        },
        
        @"MAPinAnnotationView::set_pinColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPinAnnotationView::set_pinColor");
            }
        
            // args
            // enum arg
            MAPinAnnotationColor pinColor = (MAPinAnnotationColor) [args[@"pinColor"] integerValue];
        
            // ref
            MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
        
            ref.pinColor = pinColor;
            methodResult(@"success");
        },
        
        @"MAPinAnnotationView::set_animatesDrop": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPinAnnotationView::set_animatesDrop");
            }
        
            // args
            // jsonable arg
            BOOL animatesDrop = [args[@"animatesDrop"] boolValue];
        
            // ref
            MAPinAnnotationView* ref = (MAPinAnnotationView*) args[@"__this__"];
        
            ref.animatesDrop = animatesDrop;
            methodResult(@"success");
        },
        
        @"MAHeatMapNode::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapNode::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            MAHeatMapNode* ref = (MAHeatMapNode*) args[@"__this__"];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"MAHeatMapNode::set_intensity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapNode::set_intensity");
            }
        
            // args
            // jsonable arg
            float intensity = [args[@"intensity"] floatValue];
        
            // ref
            MAHeatMapNode* ref = (MAHeatMapNode*) args[@"__this__"];
        
            ref.intensity = intensity;
            methodResult(@"success");
        },
        
        @"MAHeatMapTileOverlay::set_data": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapTileOverlay::set_data");
            }
        
            // args
            // list arg
            NSArray<MAHeatMapNode*>* data = (NSArray<MAHeatMapNode*>*) args[@"data"];
        
            // ref
            MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) args[@"__this__"];
        
            ref.data = data;
            methodResult(@"success");
        },
        
        @"MAHeatMapTileOverlay::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapTileOverlay::set_radius");
            }
        
            // args
            // jsonable arg
            NSInteger radius = [args[@"radius"] longValue];
        
            // ref
            MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) args[@"__this__"];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"MAHeatMapTileOverlay::set_opacity": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapTileOverlay::set_opacity");
            }
        
            // args
            // jsonable arg
            CGFloat opacity = [args[@"opacity"] floatValue];
        
            // ref
            MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) args[@"__this__"];
        
            ref.opacity = opacity;
            methodResult(@"success");
        },
        
        @"MAHeatMapTileOverlay::set_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapTileOverlay::set_gradient");
            }
        
            // args
            // ref arg
            MAHeatMapGradient* gradient = (MAHeatMapGradient*) (args[@"gradient"] == [NSNull null] ? nil : args[@"gradient"]);
        
            // ref
            MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) args[@"__this__"];
        
            ref.gradient = gradient;
            methodResult(@"success");
        },
        
        @"MAHeatMapTileOverlay::set_allowRetinaAdapting": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAHeatMapTileOverlay::set_allowRetinaAdapting");
            }
        
            // args
            // jsonable arg
            BOOL allowRetinaAdapting = [args[@"allowRetinaAdapting"] boolValue];
        
            // ref
            MAHeatMapTileOverlay* ref = (MAHeatMapTileOverlay*) args[@"__this__"];
        
            ref.allowRetinaAdapting = allowRetinaAdapting;
            methodResult(@"success");
        },
        
        @"MAMapStatus::set_centerCoordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapStatus::set_centerCoordinate");
            }
        
            // args
            // struct arg
            NSValue* centerCoordinateValue = (NSValue*) args[@"centerCoordinate"];
            CLLocationCoordinate2D centerCoordinate;
            [centerCoordinateValue getValue:&centerCoordinate];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) args[@"__this__"];
        
            ref.centerCoordinate = centerCoordinate;
            methodResult(@"success");
        },
        
        @"MAMapStatus::set_zoomLevel": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapStatus::set_zoomLevel");
            }
        
            // args
            // jsonable arg
            CGFloat zoomLevel = [args[@"zoomLevel"] floatValue];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) args[@"__this__"];
        
            ref.zoomLevel = zoomLevel;
            methodResult(@"success");
        },
        
        @"MAMapStatus::set_rotationDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapStatus::set_rotationDegree");
            }
        
            // args
            // jsonable arg
            CGFloat rotationDegree = [args[@"rotationDegree"] floatValue];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) args[@"__this__"];
        
            ref.rotationDegree = rotationDegree;
            methodResult(@"success");
        },
        
        @"MAMapStatus::set_cameraDegree": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapStatus::set_cameraDegree");
            }
        
            // args
            // jsonable arg
            CGFloat cameraDegree = [args[@"cameraDegree"] floatValue];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) args[@"__this__"];
        
            ref.cameraDegree = cameraDegree;
            methodResult(@"success");
        },
        
        @"MAMapStatus::set_screenAnchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapStatus::set_screenAnchor");
            }
        
            // args
            // struct arg
            NSValue* screenAnchorValue = (NSValue*) args[@"screenAnchor"];
            CGPoint screenAnchor;
            [screenAnchorValue getValue:&screenAnchor];
        
            // ref
            MAMapStatus* ref = (MAMapStatus*) args[@"__this__"];
        
            ref.screenAnchor = screenAnchor;
            methodResult(@"success");
        },
        
        @"MAPointAnnotation::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPointAnnotation::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            MAPointAnnotation* ref = (MAPointAnnotation*) args[@"__this__"];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"MAPointAnnotation::set_lockedToScreen": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPointAnnotation::set_lockedToScreen");
            }
        
            // args
            // jsonable arg
            BOOL lockedToScreen = [args[@"lockedToScreen"] boolValue];
        
            // ref
            MAPointAnnotation* ref = (MAPointAnnotation*) args[@"__this__"];
        
            ref.lockedToScreen = lockedToScreen;
            methodResult(@"success");
        },
        
        @"MAPointAnnotation::set_lockedScreenPoint": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPointAnnotation::set_lockedScreenPoint");
            }
        
            // args
            // struct arg
            NSValue* lockedScreenPointValue = (NSValue*) args[@"lockedScreenPoint"];
            CGPoint lockedScreenPoint;
            [lockedScreenPointValue getValue:&lockedScreenPoint];
        
            // ref
            MAPointAnnotation* ref = (MAPointAnnotation*) args[@"__this__"];
        
            ref.lockedScreenPoint = lockedScreenPoint;
            methodResult(@"success");
        },
        
        @"MACircle::set_coordinate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACircle::set_coordinate");
            }
        
            // args
            // struct arg
            NSValue* coordinateValue = (NSValue*) args[@"coordinate"];
            CLLocationCoordinate2D coordinate;
            [coordinateValue getValue:&coordinate];
        
            // ref
            MACircle* ref = (MACircle*) args[@"__this__"];
        
            ref.coordinate = coordinate;
            methodResult(@"success");
        },
        
        @"MACircle::set_radius": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MACircle::set_radius");
            }
        
            // args
            // jsonable arg
            CLLocationDistance radius = [args[@"radius"] doubleValue];
        
            // ref
            MACircle* ref = (MACircle*) args[@"__this__"];
        
            ref.radius = radius;
            methodResult(@"success");
        },
        
        @"MAAnnotation::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotation::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            id<MAAnnotation> ref = (id<MAAnnotation>) args[@"__this__"];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"MAAnnotation::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotation::set_subtitle");
            }
        
            // args
            // jsonable arg
            NSString* subtitle = (NSString*) args[@"subtitle"];
        
            // ref
            id<MAAnnotation> ref = (id<MAAnnotation>) args[@"__this__"];
        
            ref.subtitle = subtitle;
            methodResult(@"success");
        },
        
        @"MAMapCustomStyleOptions::set_styleData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapCustomStyleOptions::set_styleData");
            }
        
            // args
            // ref arg
            NSData* styleData = (NSData*) (args[@"styleData"] == [NSNull null] ? nil : args[@"styleData"]);
        
            // ref
            MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) args[@"__this__"];
        
            ref.styleData = styleData;
            methodResult(@"success");
        },
        
        @"MAMapCustomStyleOptions::set_styleDataOverseaPath": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapCustomStyleOptions::set_styleDataOverseaPath");
            }
        
            // args
            // jsonable arg
            NSString* styleDataOverseaPath = (NSString*) args[@"styleDataOverseaPath"];
        
            // ref
            MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) args[@"__this__"];
        
            ref.styleDataOverseaPath = styleDataOverseaPath;
            methodResult(@"success");
        },
        
        @"MAMapCustomStyleOptions::set_styleId": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapCustomStyleOptions::set_styleId");
            }
        
            // args
            // jsonable arg
            NSString* styleId = (NSString*) args[@"styleId"];
        
            // ref
            MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) args[@"__this__"];
        
            ref.styleId = styleId;
            methodResult(@"success");
        },
        
        @"MAMapCustomStyleOptions::set_styleTextureData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapCustomStyleOptions::set_styleTextureData");
            }
        
            // args
            // ref arg
            NSData* styleTextureData = (NSData*) (args[@"styleTextureData"] == [NSNull null] ? nil : args[@"styleTextureData"]);
        
            // ref
            MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) args[@"__this__"];
        
            ref.styleTextureData = styleTextureData;
            methodResult(@"success");
        },
        
        @"MAMapCustomStyleOptions::set_styleExtraData": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMapCustomStyleOptions::set_styleExtraData");
            }
        
            // args
            // ref arg
            NSData* styleExtraData = (NSData*) (args[@"styleExtraData"] == [NSNull null] ? nil : args[@"styleExtraData"]);
        
            // ref
            MAMapCustomStyleOptions* ref = (MAMapCustomStyleOptions*) args[@"__this__"];
        
            ref.styleExtraData = styleExtraData;
            methodResult(@"success");
        },
        
        @"MAMultiColoredPolylineRenderer::set_strokeColors": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiColoredPolylineRenderer::set_strokeColors");
            }
        
            // args
            // list arg
            NSArray<UIColor*>* strokeColors = (NSArray<UIColor*>*) args[@"strokeColors"];
        
            // ref
            MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) args[@"__this__"];
        
            ref.strokeColors = strokeColors;
            methodResult(@"success");
        },
        
        @"MAMultiColoredPolylineRenderer::set_gradient": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiColoredPolylineRenderer::set_gradient");
            }
        
            // args
            // jsonable arg
            BOOL gradient = [args[@"gradient"] boolValue];
        
            // ref
            MAMultiColoredPolylineRenderer* ref = (MAMultiColoredPolylineRenderer*) args[@"__this__"];
        
            ref.gradient = gradient;
            methodResult(@"success");
        },
        
        @"MAAnimatedAnnotation::set_movingDirection": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnimatedAnnotation::set_movingDirection");
            }
        
            // args
            // jsonable arg
            CLLocationDirection movingDirection = [args[@"movingDirection"] doubleValue];
        
            // ref
            MAAnimatedAnnotation* ref = (MAAnimatedAnnotation*) args[@"__this__"];
        
            ref.movingDirection = movingDirection;
            methodResult(@"success");
        },
        
        @"MAMultiTexturePolylineRenderer::set_strokeTextureImages": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiTexturePolylineRenderer::set_strokeTextureImages");
            }
        
            // args
            // list arg
            NSArray<NSObject*>* strokeTextureImages = (NSArray<NSObject*>*) args[@"strokeTextureImages"];
        
            // ref
            MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) args[@"__this__"];
        
            ref.strokeTextureImages = strokeTextureImages;
            methodResult(@"success");
        },
        
        @"MAMultiTexturePolylineRenderer::set_showRangeEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiTexturePolylineRenderer::set_showRangeEnabled");
            }
        
            // args
            // jsonable arg
            BOOL showRangeEnabled = [args[@"showRangeEnabled"] boolValue];
        
            // ref
            MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) args[@"__this__"];
        
            ref.showRangeEnabled = showRangeEnabled;
            methodResult(@"success");
        },
        
        @"MAMultiTexturePolylineRenderer::set_showRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiTexturePolylineRenderer::set_showRange");
            }
        
            // args
            // struct arg
            NSValue* showRangeValue = (NSValue*) args[@"showRange"];
            MAPathShowRange showRange;
            [showRangeValue getValue:&showRange];
        
            // ref
            MAMultiTexturePolylineRenderer* ref = (MAMultiTexturePolylineRenderer*) args[@"__this__"];
        
            ref.showRange = showRange;
            methodResult(@"success");
        },
        
        @"MAPathShowRange::set_begin": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPathShowRange::set_begin");
            }
        
            // args
            // jsonable arg
            float begin = [args[@"begin"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            MAPathShowRange ref;
            [dataValue getValue:&ref];
        
            ref.begin = begin;
            methodResult(@"success");
        },
        
        @"MAPathShowRange::set_end": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPathShowRange::set_end");
            }
        
            // args
            // jsonable arg
            float end = [args[@"end"] floatValue];
        
            // ref
            NSValue* dataValue = (NSValue*) ((NSDictionary<NSString*, NSObject*>*) args)[@"__this__"];
            MAPathShowRange ref;
            [dataValue getValue:&ref];
        
            ref.end = end;
            methodResult(@"success");
        },
        
        @"MAMultiPolyline::set_drawStyleIndexes": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPolyline::set_drawStyleIndexes");
            }
        
            // args
            // jsonable arg
            NSArray<NSNumber*>* drawStyleIndexes = (NSArray<NSNumber*>*) args[@"drawStyleIndexes"];
        
            // ref
            MAMultiPolyline* ref = (MAMultiPolyline*) args[@"__this__"];
        
            ref.drawStyleIndexes = drawStyleIndexes;
            methodResult(@"success");
        },
        
        @"MATraceManager::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MATraceManager::set_delegate");
            }
        
            // args
        
        
            // ref
            MATraceManager* ref = (MATraceManager*) args[@"__this__"];
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"MAMultiPointOverlayRenderer::set_delegate": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::set_delegate");
            }
        
            // args
        
        
            // ref
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) args[@"__this__"];
        
            ref.delegate = weakSelf;
            methodResult(@"success");
        },
        
        @"MAMultiPointOverlayRenderer::set_icon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::set_icon");
            }
        
            // args
            // ref arg
            UIImage* icon = (UIImage*) (args[@"icon"] == [NSNull null] ? nil : args[@"icon"]);
        
            // ref
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) args[@"__this__"];
        
            ref.icon = icon;
            methodResult(@"success");
        },
        
        @"MAMultiPointOverlayRenderer::set_pointSize": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::set_pointSize");
            }
        
            // args
            // struct arg
            NSValue* pointSizeValue = (NSValue*) args[@"pointSize"];
            CGSize pointSize;
            [pointSizeValue getValue:&pointSize];
        
            // ref
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) args[@"__this__"];
        
            ref.pointSize = pointSize;
            methodResult(@"success");
        },
        
        @"MAMultiPointOverlayRenderer::set_anchor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAMultiPointOverlayRenderer::set_anchor");
            }
        
            // args
            // struct arg
            NSValue* anchorValue = (NSValue*) args[@"anchor"];
            CGPoint anchor;
            [anchorValue getValue:&anchor];
        
            // ref
            MAMultiPointOverlayRenderer* ref = (MAMultiPointOverlayRenderer*) args[@"__this__"];
        
            ref.anchor = anchor;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_is3DArrowLine": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_is3DArrowLine");
            }
        
            // args
            // jsonable arg
            BOOL is3DArrowLine = [args[@"is3DArrowLine"] boolValue];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.is3DArrowLine = is3DArrowLine;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_sideColor": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_sideColor");
            }
        
            // args
            // ref arg
            UIColor* sideColor = (UIColor*) (args[@"sideColor"] == [NSNull null] ? nil : args[@"sideColor"]);
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.sideColor = sideColor;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_userInteractionEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_userInteractionEnabled");
            }
        
            // args
            // jsonable arg
            BOOL userInteractionEnabled = [args[@"userInteractionEnabled"] boolValue];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.userInteractionEnabled = userInteractionEnabled;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_hitTestInset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_hitTestInset");
            }
        
            // args
            // jsonable arg
            CGFloat hitTestInset = [args[@"hitTestInset"] floatValue];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.hitTestInset = hitTestInset;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_showRangeEnabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_showRangeEnabled");
            }
        
            // args
            // jsonable arg
            BOOL showRangeEnabled = [args[@"showRangeEnabled"] boolValue];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.showRangeEnabled = showRangeEnabled;
            methodResult(@"success");
        },
        
        @"MAPolylineRenderer::set_showRange": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAPolylineRenderer::set_showRange");
            }
        
            // args
            // struct arg
            NSValue* showRangeValue = (NSValue*) args[@"showRange"];
            MAPathShowRange showRange;
            [showRangeValue getValue:&showRange];
        
            // ref
            MAPolylineRenderer* ref = (MAPolylineRenderer*) args[@"__this__"];
        
            ref.showRange = showRange;
            methodResult(@"success");
        },
        
        @"MAShape::set_title": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAShape::set_title");
            }
        
            // args
            // jsonable arg
            NSString* title = (NSString*) args[@"title"];
        
            // ref
            MAShape* ref = (MAShape*) args[@"__this__"];
        
            ref.title = title;
            methodResult(@"success");
        },
        
        @"MAShape::set_subtitle": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAShape::set_subtitle");
            }
        
            // args
            // jsonable arg
            NSString* subtitle = (NSString*) args[@"subtitle"];
        
            // ref
            MAShape* ref = (MAShape*) args[@"__this__"];
        
            ref.subtitle = subtitle;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_zIndex": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_zIndex");
            }
        
            // args
            // jsonable arg
            NSInteger zIndex = [args[@"zIndex"] longValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.zIndex = zIndex;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_annotation": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_annotation");
            }
        
            // args
            // ref arg
            id<MAAnnotation> annotation = (id<MAAnnotation>) (args[@"annotation"] == [NSNull null] ? nil : args[@"annotation"]);
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.annotation = annotation;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_image": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_image");
            }
        
            // args
            // ref arg
            UIImage* image = (UIImage*) (args[@"image"] == [NSNull null] ? nil : args[@"image"]);
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.image = image;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_customCalloutView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_customCalloutView");
            }
        
            // args
            // ref arg
            MACustomCalloutView* customCalloutView = (MACustomCalloutView*) (args[@"customCalloutView"] == [NSNull null] ? nil : args[@"customCalloutView"]);
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.customCalloutView = customCalloutView;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_centerOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_centerOffset");
            }
        
            // args
            // struct arg
            NSValue* centerOffsetValue = (NSValue*) args[@"centerOffset"];
            CGPoint centerOffset;
            [centerOffsetValue getValue:&centerOffset];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.centerOffset = centerOffset;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_calloutOffset": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_calloutOffset");
            }
        
            // args
            // struct arg
            NSValue* calloutOffsetValue = (NSValue*) args[@"calloutOffset"];
            CGPoint calloutOffset;
            [calloutOffsetValue getValue:&calloutOffset];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.calloutOffset = calloutOffset;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_enabled": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_enabled");
            }
        
            // args
            // jsonable arg
            BOOL enabled = [args[@"enabled"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.enabled = enabled;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_highlighted": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_highlighted");
            }
        
            // args
            // jsonable arg
            BOOL highlighted = [args[@"highlighted"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.highlighted = highlighted;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_selected": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_selected");
            }
        
            // args
            // jsonable arg
            BOOL selected = [args[@"selected"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.selected = selected;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_canShowCallout": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_canShowCallout");
            }
        
            // args
            // jsonable arg
            BOOL canShowCallout = [args[@"canShowCallout"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.canShowCallout = canShowCallout;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_leftCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_leftCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* leftCalloutAccessoryView = (UIView*) (args[@"leftCalloutAccessoryView"] == [NSNull null] ? nil : args[@"leftCalloutAccessoryView"]);
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.leftCalloutAccessoryView = leftCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_rightCalloutAccessoryView": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_rightCalloutAccessoryView");
            }
        
            // args
            // ref arg
            UIView* rightCalloutAccessoryView = (UIView*) (args[@"rightCalloutAccessoryView"] == [NSNull null] ? nil : args[@"rightCalloutAccessoryView"]);
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.rightCalloutAccessoryView = rightCalloutAccessoryView;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_draggable": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_draggable");
            }
        
            // args
            // jsonable arg
            BOOL draggable = [args[@"draggable"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.draggable = draggable;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_dragState": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_dragState");
            }
        
            // args
            // enum arg
            MAAnnotationViewDragState dragState = (MAAnnotationViewDragState) [args[@"dragState"] integerValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.dragState = dragState;
            methodResult(@"success");
        },
        
        @"MAAnnotationView::set_canAdjustPositon": ^(NSObject <FlutterPluginRegistrar> * registrar, id args, FlutterResult methodResult) {
            // print log
            if (enableLog) {
                NSLog(@"MAAnnotationView::set_canAdjustPositon");
            }
        
            // args
            // jsonable arg
            BOOL canAdjustPositon = [args[@"canAdjustPositon"] boolValue];
        
            // ref
            MAAnnotationView* ref = (MAAnnotationView*) args[@"__this__"];
        
            ref.canAdjustPositon = canAdjustPositon;
            methodResult(@"success");
        },
        
    };
}

@end
